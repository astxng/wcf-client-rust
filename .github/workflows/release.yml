name: Create Release Draft

on:
  push:
    # tags: ["v[0-9]+.[0-9]+.[0-9]+*"]
    branches: [dev]
  workflow_dispatch:

jobs:
  windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # Ignore lines containing 'version = "x.x.x"' and hash the rest of Cargo.lock
      - name: Generate custom cache key
        id: cargo-hash
        run: |
          grep -v '^version = ' src-tauri/Cargo.lock | shasum -a 256 | awk '{ print $1 }' > cargo_hash.txt
          echo "CARGO_CACHE_KEY=$(cat cargo_hash.txt)" >> $GITHUB_ENV
          echo "::set-output name=CARGO_CACHE_KEY::$(cat cargo_hash.txt)"

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ steps.cargo-hash.outputs.CARGO_CACHE_KEY }}-${{ runner.os }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo git index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ steps.cargo-hash.outputs.CARGO_CACHE_KEY }}-${{ runner.os }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache Cargo target directory
        uses: actions/cache@v4
        with:
          path: src-tauri/target
          key: ${{ runner.os }}-cargo-target-${{ matrix.target }}-${{ steps.cargo-hash.outputs.CARGO_CACHE_KEY }}-$(rustc --version)
          restore-keys: |
            ${{ runner.os }}-cargo-target-

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}-${{ runner.os }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Node Module
        run: npm i

      - name: Cache Tauri CLI (cross-platform)
        id: tauri-cli-cache
        uses: actions/cache@v4
        with:
          path: |
            C:/Users/runneradmin/.cargo/bin/cargo-tauri
            C:/Users/runneradmin/.cargo/bin/cargo-tauri.exe
          key: ${{ runner.os }}-tauri-cli-${{ steps.cargo-hash.outputs.CARGO_CACHE_KEY }}
          restore-keys: |
            ${{ runner.os }}-tauri-cli-

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "22.2"

      - name: Install Tauri CLI if not cached
        run: |
          echo "PATH=C:/Users/runneradmin/.cargo/bin" >> $GITHUB_PATH
          cargo install tauri-cli --version ^1.0.0
        if: steps.tauri-cli-cache.outputs.cache-hit != 'true'
        # env:
        #   PATH: C:/Users/runneradmin/.cargo/bin:${{ env.PATH }}

      - name: Build
        run: cargo tauri build
        working-directory: ./src-tauri

      - name: Create output directory
        run: mkdir output

      - name: Copy files to output
        run: cp src-tauri\\target\\release\\bundle\\nsis\\*.exe output\\

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: output\\*.exe

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: windows

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Determine Release Info
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          VERSION=${GITHUB_REF##*/}
          MAJOR=${VERSION%%.*}
          MINOR=${VERSION%.*}
          MINOR=${MINOR#*.}
          PATCH=${VERSION##*.}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "WINDOWS_DIR=WeChatFerry_${MAJOR}.${MINOR}.${PATCH}_windows_x64" >> $GITHUB_ENV
          echo "INNER_DIR=WeChatFerry-$VERSION" >> $GITHUB_ENV

      - name: Create Windows Directory
        run: mkdir -p ${{ env.WINDOWS_DIR }}

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows
          path: ${{ env.WINDOWS_DIR }}

      - name: Create Windows Archive
        run: zip -r ${{ env.WINDOWS_DIR }}.zip ${{ env.WINDOWS_DIR }}

      - name: Upload Windows binary
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.WINDOWS_DIR }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.NG_TOKEN }}
